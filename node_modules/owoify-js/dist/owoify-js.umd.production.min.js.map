{"version":3,"file":"owoify-js.umd.production.min.js","sources":["../src/Word.ts","../src/map_functions.ts","../src/presets.ts","../src/index.ts","../src/util/utility.ts"],"sourcesContent":["import { debug } from './util/logger';\n\nfunction searchValueContainsReplacedWords(\n  searchValue: string,\n  replaceValue: string,\n  replacedWords: Set<String>\n): boolean {\n  return Array.from(replacedWords).some(\n    word => word.replace(searchValue, replaceValue) !== word\n  );\n}\n\nexport default class Word {\n  private word: string;\n  private replacedWords: Set<string>;\n\n  constructor(word: string) {\n    this.word = word.trim();\n    this.replacedWords = new Set();\n  }\n\n  replace(\n    searchValue: any,\n    replaceValue: any,\n    replaceReplacedWords: boolean = false\n  ): Word {\n    if (\n      !replaceReplacedWords &&\n      searchValueContainsReplacedWords(\n        searchValue,\n        replaceValue,\n        this.replacedWords\n      )\n    )\n      return this;\n    const replacingWord: string = this.word\n      .replace(searchValue, replaceValue)\n      .trim();\n    const matchArray: RegExpMatchArray | null = this.word.match(searchValue);\n    const replacedWords: string[] =\n      matchArray !== null\n        ? Array.from(matchArray).map(x => x.replace(x, replaceValue))\n        : [];\n    if (replacingWord !== this.word) {\n      for (const word of replacedWords) {\n        this.replacedWords.add(word);\n      }\n\n      debug(\n        'Replaced \"',\n        this.word,\n        '\" with \"',\n        replacingWord,\n        '\" and replaced subset',\n        this.replacedWords,\n        'with search string:',\n        searchValue\n      );\n\n      this.word = replacingWord;\n    }\n    return this;\n  }\n\n  toString() {\n    return this.word;\n  }\n}\n","import Word from './Word';\n\nconst faces: Array<string> = [\n  '(・`ω´・)',\n  ';;w;;',\n  'owo',\n  'UwU',\n  '>w<',\n  '^w^',\n  '(* ^ ω ^)',\n  '(⌒ω⌒)',\n  'ヽ(*・ω・)ﾉ',\n  '(o´∀`o)',\n  '(o･ω･o)',\n  '＼(＾▽＾)／',\n];\n\nexport const Map_O_To_OwO = (input: Word): Word =>\n  input.replace(/o/g, () => (Math.round(Math.random()) ? 'owo' : 'o'));\nexport const Map_Ew_To_UwU = (input: Word): Word => input.replace(/ew/g, 'uwu');\nexport const Map_Hey_To_Hay = (input: Word): Word =>\n  input.replace(/([Hh])ey/g, '$1ay');\nexport const Map_Dead_To_Ded = (input: Word): Word =>\n  input.replace(/Dead/g, 'Ded').replace(/dead/g, 'ded');\nexport const Map_N_Vowel_T_To_Nd = (input: Word): Word =>\n  input.replace(/n[aeiou]*t/g, 'nd');\nexport const Map_Read_To_Wead = (input: Word): Word =>\n  input.replace(/Read/g, 'Wead').replace(/read/g, 'wead');\n\nexport const Map_Brackets_To_StarTrails = (input: Word): Word =>\n  input\n    .replace(/[({<]/g, '｡･:*:･ﾟ★,｡･:*:･ﾟ☆')\n    .replace(/[)}>]/g, '☆ﾟ･:*:･｡,★ﾟ･:*:･｡');\nexport const Map_PeriodCommaExclamationSemicolon_To_Kaomojis = (\n  input: Word\n): Word =>\n  input\n    .replace(\n      /[.,](?![0-9])/g,\n      () => ' ' + faces[Math.floor(Math.random() * faces.length)]\n    )\n    .replace(\n      /[!;]+/g,\n      () => ' ' + faces[Math.floor(Math.random() * faces.length)]\n    );\nexport const Map_That_To_Dat = (input: Word): Word =>\n  input.replace(/that/g, 'dat').replace(/That/g, 'Dat');\nexport const Map_Th_To_F = (input: Word): Word =>\n  input.replace(/[Tt]h(?![Ee])/g, 'f').replace(/TH(?!E)/g, 'F');\nexport const Map_Le_To_Wal = (input: Word): Word =>\n  input.replace(/le$/g, 'wal');\nexport const Map_Ve_To_We = (input: Word): Word =>\n  input.replace(/ve/g, 'we').replace(/Ve/g, 'We');\nexport const Map_Ry_To_Wwy = (input: Word): Word => input.replace(/ry/g, 'wwy');\nexport const Map_ROrL_To_W = (input: Word): Word =>\n  input.replace(/(?:r|l)/g, 'w').replace(/(?:R|L)/g, 'W');\n\nexport const Map_Ll_To_Ww = (input: Word): Word => input.replace(/ll/g, 'ww');\nexport const Map_VowelOrRExceptO_L_To_Wl = (input: Word): Word =>\n  input.replace(/[aeiur]l$/g, 'wl').replace(/[AEIUR]([lL])$/g, 'W$1');\nexport const Map_Old_To_Owld = (input: Word): Word =>\n  input.replace(/([Oo])ld/g, '$1wld').replace(/OLD/g, 'OWLD');\nexport const Map_Ol_To_Owl = (input: Word): Word =>\n  input.replace(/([Oo])l/g, '$1wl').replace(/OL/g, 'OWL');\nexport const Map_LOrR_O_To_Wo = (input: Word): Word =>\n  input.replace(/[lr]o/g, 'wo').replace(/[LR]([oO])/g, 'W$1');\nexport const Map_SpecificConsonants_O_To_Letter_And_Wo = (input: Word): Word =>\n  input\n    .replace(/([bcdfghjkmnpqstxyz])o/g, '$1wo')\n    .replace(\n      /([BCDFGHJKMNPQSTXYZ])([oO])/g,\n      (_: any, m1: string, m2: string) =>\n        m1 + (m2.toUpperCase() === m2 ? 'W' : 'w') + m2\n    );\nexport const Map_VOrW_Le_To_Wal = (input: Word): Word =>\n  input.replace(/[vw]le/g, 'wal');\nexport const Map_Fi_To_Fwi = (input: Word): Word =>\n  input.replace(/([Ff])i/g, '$1wi').replace(/FI/g, 'FWI');\nexport const Map_Ver_To_Wer = (input: Word): Word =>\n  input.replace(/([Vv])er/g, 'wer');\nexport const Map_Poi_To_Pwoi = (input: Word): Word =>\n  input.replace(/([Pp])oi/g, '$1woi');\nexport const Map_SpecificConsonants_Le_To_Letter_And_Wal = (\n  input: Word\n): Word => input.replace(/([DdFfGgHhJjPpQqRrSsTtXxYyZz])le$/g, '$1wal');\nexport const Map_Consonant_R_To_Consonant_W = (input: Word): Word =>\n  input.replace(/([BbCcDdFfGgKkPpQqSsTtWwXxZz])r/g, '$1w');\nexport const Map_Ly_To_Wy = (input: Word): Word =>\n  input.replace(/ly/g, 'wy').replace(/Ly/g, 'Wy');\nexport const Map_Ple_To_Pwe = (input: Word): Word =>\n  input.replace(/([Pp])le/g, '$1we');\nexport const Map_Nr_To_Nw = (input: Word): Word =>\n  input.replace(/([Nn])r/g, '$1w').replace(/NR/g, 'NW');\nexport const Map_Mem_To_Mwem = (input: Word): Word =>\n  input.replace(/Mem/g, 'mwem').replace(/mem/g, 'Mwem');\nexport const Unmap_Nywo_To_Nyo = (input: Word): Word =>\n  input.replace(/([Nn])ywo/g, '$1yo', true);\n\nexport const Map_Fuc_To_Fwuc = (input: Word): Word =>\n  input.replace(/([Ff])uc/g, '$1wuc');\nexport const Map_Mom_To_Mwom = (input: Word): Word =>\n  input.replace(/([Mm])om/g, '$1wom');\nexport const Map_Me_To_Mwe = (input: Word): Word =>\n  input.replace(/^Me$/g, 'Mwe').replace(/^me$/g, 'mwe');\nexport const Map_NVowel_To_Ny = (input: Word): Word =>\n  input\n    .replace(/n([aeiou])/g, 'ny$1')\n    .replace(/N([aeiou])/g, 'Ny$1')\n    .replace(/N([AEIOU])/g, 'NY$1');\nexport const Map_Ove_To_Uv = (input: Word): Word =>\n  input.replace(/ove/g, 'uv').replace(/OVE/g, 'UV');\nexport const Map_Haha_To_HehexD = (input: Word): Word =>\n  input.replace(/\\b(ha|hah|heh|hehe)+\\b/g, 'hehe xD');\nexport const Map_The_To_Teh = (input: Word): Word =>\n  input.replace(/\\b([Tt])he\\b/g, '$1eh');\nexport const Map_You_To_U = (input: Word): Word =>\n  input.replace(/\\bYou\\b/g, 'U').replace(/\\byou\\b/g, 'u');\nexport const Map_Time_To_Tim = (input: Word): Word =>\n  input.replace(/\\b([Tt])ime\\b/g, '$1im');\nexport const Map_Over_To_Owor = (input: Word): Word =>\n  input.replace(/([Oo])ver/g, '$1wor');\nexport const Map_Worse_To_Wose = (input: Word): Word =>\n  input.replace(/([Ww])orse/g, '$1ose');\nexport const Map_Great_To_Gwate = (input: Word): Word =>\n  input.replace(/([Gg])reat/g, '$1wate');\nexport const Map_Aviat_To_Awiat = (input: Word): Word =>\n  input.replace(/([Aa])viat/g, '$1wiat');\nexport const Map_Dedicat_To_Deditat = (input: Word): Word =>\n  input.replace(/([Dd])edicat/g, '$1editat');\nexport const Map_Remember_To_Rember = (input: Word): Word =>\n  input.replace(/([Rr])emember/g, '$1ember');\nexport const Map_When_To_Wen = (input: Word): Word =>\n  input.replace(/([Ww])hen/g, '$1en');\nexport const Map_Frightened_To_Frigten = (input: Word): Word =>\n  input.replace(/([Ff])righten(ed)*/g, '$1rigten');\nexport const Map_Meme_To_Mem = (input: Word): Word =>\n  input.replace(/Meme/g, 'mem').replace(/Mem/g, 'Mem');\nexport const Map_Feel_To_Fell = (input: Word): Word =>\n  input.replace(/^([Ff])eel$/g, '$1ell');\n","import * as f from './map_functions';\nimport Word from './Word';\n\nexport const specificWordMappingArray: Array<(str: Word) => Word> = [\n  f.Map_Fuc_To_Fwuc,\n  f.Map_Mom_To_Mwom,\n  f.Map_Time_To_Tim,\n  f.Map_Me_To_Mwe,\n  f.Map_Over_To_Owor,\n  f.Map_Ove_To_Uv,\n  f.Map_Haha_To_HehexD,\n  f.Map_The_To_Teh,\n  f.Map_You_To_U,\n  f.Map_Read_To_Wead,\n  f.Map_Worse_To_Wose,\n  f.Map_Great_To_Gwate,\n  f.Map_Aviat_To_Awiat,\n  f.Map_Dedicat_To_Deditat,\n  f.Map_Remember_To_Rember,\n  f.Map_When_To_Wen,\n  f.Map_Frightened_To_Frigten,\n  f.Map_Meme_To_Mem,\n  f.Map_Feel_To_Fell,\n];\nexport const uvuMappingArray: Array<(str: Word) => Word> = [\n  f.Map_O_To_OwO,\n  f.Map_Ew_To_UwU,\n  f.Map_Hey_To_Hay,\n  f.Map_Dead_To_Ded,\n  f.Map_N_Vowel_T_To_Nd,\n];\nexport const uwuMappingArray: Array<(str: Word) => Word> = [\n  f.Map_Brackets_To_StarTrails,\n  f.Map_PeriodCommaExclamationSemicolon_To_Kaomojis,\n  f.Map_That_To_Dat,\n  f.Map_Th_To_F,\n  f.Map_Le_To_Wal,\n  f.Map_Ve_To_We,\n  f.Map_Ry_To_Wwy,\n  f.Map_ROrL_To_W,\n];\nexport const owoMappingArray: Array<(str: Word) => Word> = [\n  f.Map_NVowel_To_Ny,\n  f.Map_Ll_To_Ww,\n  f.Map_VowelOrRExceptO_L_To_Wl,\n  f.Map_Old_To_Owld,\n  f.Map_Ol_To_Owl,\n  f.Map_LOrR_O_To_Wo,\n  f.Map_SpecificConsonants_O_To_Letter_And_Wo,\n  f.Map_VOrW_Le_To_Wal,\n  f.Map_Fi_To_Fwi,\n  f.Map_Ver_To_Wer,\n  f.Map_Poi_To_Pwoi,\n  f.Map_SpecificConsonants_Le_To_Letter_And_Wal,\n  f.Map_Consonant_R_To_Consonant_W,\n  f.Map_Ly_To_Wy,\n  f.Map_Ple_To_Pwe,\n  f.Map_Nr_To_Nw,\n  f.Map_Mem_To_Mwem,\n  f.Unmap_Nywo_To_Nyo,\n];\n","import Word from './Word';\nimport { interleaveArrays } from './util/utility';\nimport {\n  uwuMappingArray,\n  owoMappingArray,\n  uvuMappingArray,\n  specificWordMappingArray,\n} from './presets';\n\n/**\n * owoify everything\n * @param v word to owoify\n * @param level level of owo-ness. (owo -> uwu -> uvu)\n */\nexport default function owoify(v: string, level: string = 'owo'): string {\n  let whitespace: string[] = v.split(/[^\\s]+/g);\n  let words: Word[] = v.split(/\\s+/g).map(x => new Word(x));\n  words = words.map(x => {\n    specificWordMappingArray.reduce((word, f) => f(word), x);\n    switch (level) {\n      case 'uvu':\n        uvuMappingArray.reduce((word, f) => f(word), x);\n      case 'uwu':\n        uwuMappingArray.reduce((word, f) => f(word), x);\n      case 'owo':\n        owoMappingArray.reduce((word, f) => f(word), x);\n      default:\n        break;\n    }\n    return x;\n  });\n  return interleaveArrays(whitespace, words).join('');\n}\n\nexport function uwuify(v: string): string {\n  return owoify(v, 'uwu');\n}\n\nexport function uvuify(v: string): string {\n  return owoify(v, 'uvu');\n}\n","/**\n * Interleaves 2 arrays\n * @internal\n * @param a first array\n * @param b second arry\n * @returns array with interleaved elements\n */\nexport function interleaveArrays(a: any[], b: any[]): any[] {\n  let arr: any[] = [];\n  let observed = a;\n  let other = b;\n  let temp: null | any[] = null;\n  while (observed.length > 0) {\n    arr.push(observed.shift());\n    temp = observed;\n    observed = other;\n    other = temp;\n  }\n  if (other.length > 0) arr.push(...other);\n  return arr;\n}\n"],"names":["Word","word","this","trim","replacedWords","Set","replace","searchValue","replaceValue","replaceReplacedWords","Array","from","some","searchValueContainsReplacedWords","replacingWord","matchArray","match","map","x","add","toString","faces","specificWordMappingArray","input","uvuMappingArray","Math","round","random","uwuMappingArray","floor","length","owoMappingArray","_","m1","m2","toUpperCase","owoify","v","level","whitespace","split","words","a","b","arr","observed","other","temp","push","shift","interleaveArrays","reduce","f","join"],"mappings":"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"}